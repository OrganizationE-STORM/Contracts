{"abi":[],"bytecode":{"object":"0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220ff48f84d31ac5771c3175f90ec85ad8770f92696d3dea4845aed57e99ff9b85264736f6c634300081c0033","sourceMap":"521:3181:43:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220ff48f84d31ac5771c3175f90ec85ad8770f92696d3dea4845aed57e99ff9b85264736f6c634300081c0033","sourceMap":"521:3181:43:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0564ddb19c6d870e27b789d8f985283d815267ad7224883c2d5243c8bacc7dc0\",\"dweb:/ipfs/QmeC953H4sj88ZRFdJNFdmpf7J9SksP1wK4jyMHLo66z49\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e\",\"dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d\",\"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/openzeppelin-contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":"MessageHashUtils"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a","urls":["bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a","dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed","urls":["bzz-raw://0564ddb19c6d870e27b789d8f985283d815267ad7224883c2d5243c8bacc7dc0","dweb:/ipfs/QmeC953H4sj88ZRFdJNFdmpf7J9SksP1wK4jyMHLo66z49"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575","urls":["bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e","dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea","urls":["bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d","dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3","urls":["bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03","dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol","id":42914,"exportedSymbols":{"MessageHashUtils":[42913],"Strings":[42264]},"nodeType":"SourceUnit","src":"123:3580:43","nodes":[{"id":42841,"nodeType":"PragmaDirective","src":"123:24:43","nodes":[],"literals":["solidity","^","0.8",".20"]},{"id":42843,"nodeType":"ImportDirective","src":"149:39:43","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/Strings.sol","file":"../Strings.sol","nameLocation":"-1:-1:-1","scope":42914,"sourceUnit":42265,"symbolAliases":[{"foreign":{"id":42842,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42264,"src":"157:7:43","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":42913,"nodeType":"ContractDefinition","src":"521:3181:43","nodes":[{"id":42854,"nodeType":"FunctionDefinition","src":"1222:433:43","nodes":[],"body":{"id":42853,"nodeType":"Block","src":"1314:341:43","nodes":[],"statements":[{"AST":{"nativeSrc":"1349:300:43","nodeType":"YulBlock","src":"1349:300:43","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1370:4:43","nodeType":"YulLiteral","src":"1370:4:43","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"1376:34:43","nodeType":"YulLiteral","src":"1376:34:43","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"1363:6:43","nodeType":"YulIdentifier","src":"1363:6:43"},"nativeSrc":"1363:48:43","nodeType":"YulFunctionCall","src":"1363:48:43"},"nativeSrc":"1363:48:43","nodeType":"YulExpressionStatement","src":"1363:48:43"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1472:4:43","nodeType":"YulLiteral","src":"1472:4:43","type":"","value":"0x1c"},{"name":"messageHash","nativeSrc":"1478:11:43","nodeType":"YulIdentifier","src":"1478:11:43"}],"functionName":{"name":"mstore","nativeSrc":"1465:6:43","nodeType":"YulIdentifier","src":"1465:6:43"},"nativeSrc":"1465:25:43","nodeType":"YulFunctionCall","src":"1465:25:43"},"nativeSrc":"1465:25:43","nodeType":"YulExpressionStatement","src":"1465:25:43"},{"nativeSrc":"1544:31:43","nodeType":"YulAssignment","src":"1544:31:43","value":{"arguments":[{"kind":"number","nativeSrc":"1564:4:43","nodeType":"YulLiteral","src":"1564:4:43","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1570:4:43","nodeType":"YulLiteral","src":"1570:4:43","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"1554:9:43","nodeType":"YulIdentifier","src":"1554:9:43"},"nativeSrc":"1554:21:43","nodeType":"YulFunctionCall","src":"1554:21:43"},"variableNames":[{"name":"digest","nativeSrc":"1544:6:43","nodeType":"YulIdentifier","src":"1544:6:43"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":42850,"isOffset":false,"isSlot":false,"src":"1544:6:43","valueSize":1},{"declaration":42847,"isOffset":false,"isSlot":false,"src":"1478:11:43","valueSize":1}],"flags":["memory-safe"],"id":42852,"nodeType":"InlineAssembly","src":"1324:325:43"}]},"documentation":{"id":42845,"nodeType":"StructuredDocumentation","src":"552:665:43","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"1231:22:43","parameters":{"id":42848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42847,"mutability":"mutable","name":"messageHash","nameLocation":"1262:11:43","nodeType":"VariableDeclaration","scope":42854,"src":"1254:19:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":42846,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1254:7:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1253:21:43"},"returnParameters":{"id":42851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42850,"mutability":"mutable","name":"digest","nameLocation":"1306:6:43","nodeType":"VariableDeclaration","scope":42854,"src":"1298:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":42849,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1298:7:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1297:16:43"},"scope":42913,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":42880,"nodeType":"FunctionDefinition","src":"2121:229:43","nodes":[],"body":{"id":42879,"nodeType":"Block","src":"2207:143:43","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":42866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2259:32:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"arguments":[{"expression":{"id":42871,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42857,"src":"2316:7:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":42872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2324:6:43","memberName":"length","nodeType":"MemberAccess","src":"2316:14:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":42869,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42264,"src":"2299:7:43","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$42264_$","typeString":"type(library Strings)"}},"id":42870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2307:8:43","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":42012,"src":"2299:16:43","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":42873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2299:32:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":42868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2293:5:43","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":42867,"name":"bytes","nodeType":"ElementaryTypeName","src":"2293:5:43","typeDescriptions":{}}},"id":42874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2293:39:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":42875,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42857,"src":"2334:7:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":42864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2246:5:43","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":42863,"name":"bytes","nodeType":"ElementaryTypeName","src":"2246:5:43","typeDescriptions":{}}},"id":42865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2252:6:43","memberName":"concat","nodeType":"MemberAccess","src":"2246:12:43","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":42876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2246:96:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":42862,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2236:9:43","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":42877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2236:107:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":42861,"id":42878,"nodeType":"Return","src":"2217:126:43"}]},"documentation":{"id":42855,"nodeType":"StructuredDocumentation","src":"1661:455:43","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"2130:22:43","parameters":{"id":42858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42857,"mutability":"mutable","name":"message","nameLocation":"2166:7:43","nodeType":"VariableDeclaration","scope":42880,"src":"2153:20:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42856,"name":"bytes","nodeType":"ElementaryTypeName","src":"2153:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2152:22:43"},"returnParameters":{"id":42861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42880,"src":"2198:7:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":42859,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2198:7:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2197:9:43"},"scope":42913,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":42900,"nodeType":"FunctionDefinition","src":"2693:191:43","nodes":[],"body":{"id":42899,"nodeType":"Block","src":"2804:80:43","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":42893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"2848:10:43","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":42894,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42883,"src":"2860:9:43","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":42895,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42885,"src":"2871:4:43","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":42891,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2831:3:43","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":42892,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:12:43","memberName":"encodePacked","nodeType":"MemberAccess","src":"2831:16:43","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":42896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:45:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":42890,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2821:9:43","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":42897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2821:56:43","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":42889,"id":42898,"nodeType":"Return","src":"2814:63:43"}]},"documentation":{"id":42881,"nodeType":"StructuredDocumentation","src":"2356:332:43","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"2702:31:43","parameters":{"id":42886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42883,"mutability":"mutable","name":"validator","nameLocation":"2742:9:43","nodeType":"VariableDeclaration","scope":42900,"src":"2734:17:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42882,"name":"address","nodeType":"ElementaryTypeName","src":"2734:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":42885,"mutability":"mutable","name":"data","nameLocation":"2766:4:43","nodeType":"VariableDeclaration","scope":42900,"src":"2753:17:43","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":42884,"name":"bytes","nodeType":"ElementaryTypeName","src":"2753:5:43","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2733:38:43"},"returnParameters":{"id":42889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":42900,"src":"2795:7:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":42887,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2795:7:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2794:9:43"},"scope":42913,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":42912,"nodeType":"FunctionDefinition","src":"3326:374:43","nodes":[],"body":{"id":42911,"nodeType":"Block","src":"3435:265:43","nodes":[],"statements":[{"AST":{"nativeSrc":"3470:224:43","nodeType":"YulBlock","src":"3470:224:43","statements":[{"nativeSrc":"3484:22:43","nodeType":"YulVariableDeclaration","src":"3484:22:43","value":{"arguments":[{"kind":"number","nativeSrc":"3501:4:43","nodeType":"YulLiteral","src":"3501:4:43","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"3495:5:43","nodeType":"YulIdentifier","src":"3495:5:43"},"nativeSrc":"3495:11:43","nodeType":"YulFunctionCall","src":"3495:11:43"},"variables":[{"name":"ptr","nativeSrc":"3488:3:43","nodeType":"YulTypedName","src":"3488:3:43","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"3526:3:43","nodeType":"YulIdentifier","src":"3526:3:43"},{"hexValue":"1901","kind":"string","nativeSrc":"3531:10:43","nodeType":"YulLiteral","src":"3531:10:43","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"3519:6:43","nodeType":"YulIdentifier","src":"3519:6:43"},"nativeSrc":"3519:23:43","nodeType":"YulFunctionCall","src":"3519:23:43"},"nativeSrc":"3519:23:43","nodeType":"YulExpressionStatement","src":"3519:23:43"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3566:3:43","nodeType":"YulIdentifier","src":"3566:3:43"},{"kind":"number","nativeSrc":"3571:4:43","nodeType":"YulLiteral","src":"3571:4:43","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"3562:3:43","nodeType":"YulIdentifier","src":"3562:3:43"},"nativeSrc":"3562:14:43","nodeType":"YulFunctionCall","src":"3562:14:43"},{"name":"domainSeparator","nativeSrc":"3578:15:43","nodeType":"YulIdentifier","src":"3578:15:43"}],"functionName":{"name":"mstore","nativeSrc":"3555:6:43","nodeType":"YulIdentifier","src":"3555:6:43"},"nativeSrc":"3555:39:43","nodeType":"YulFunctionCall","src":"3555:39:43"},"nativeSrc":"3555:39:43","nodeType":"YulExpressionStatement","src":"3555:39:43"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3618:3:43","nodeType":"YulIdentifier","src":"3618:3:43"},{"kind":"number","nativeSrc":"3623:4:43","nodeType":"YulLiteral","src":"3623:4:43","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"3614:3:43","nodeType":"YulIdentifier","src":"3614:3:43"},"nativeSrc":"3614:14:43","nodeType":"YulFunctionCall","src":"3614:14:43"},{"name":"structHash","nativeSrc":"3630:10:43","nodeType":"YulIdentifier","src":"3630:10:43"}],"functionName":{"name":"mstore","nativeSrc":"3607:6:43","nodeType":"YulIdentifier","src":"3607:6:43"},"nativeSrc":"3607:34:43","nodeType":"YulFunctionCall","src":"3607:34:43"},"nativeSrc":"3607:34:43","nodeType":"YulExpressionStatement","src":"3607:34:43"},{"nativeSrc":"3654:30:43","nodeType":"YulAssignment","src":"3654:30:43","value":{"arguments":[{"name":"ptr","nativeSrc":"3674:3:43","nodeType":"YulIdentifier","src":"3674:3:43"},{"kind":"number","nativeSrc":"3679:4:43","nodeType":"YulLiteral","src":"3679:4:43","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"3664:9:43","nodeType":"YulIdentifier","src":"3664:9:43"},"nativeSrc":"3664:20:43","nodeType":"YulFunctionCall","src":"3664:20:43"},"variableNames":[{"name":"digest","nativeSrc":"3654:6:43","nodeType":"YulIdentifier","src":"3654:6:43"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":42908,"isOffset":false,"isSlot":false,"src":"3654:6:43","valueSize":1},{"declaration":42903,"isOffset":false,"isSlot":false,"src":"3578:15:43","valueSize":1},{"declaration":42905,"isOffset":false,"isSlot":false,"src":"3630:10:43","valueSize":1}],"flags":["memory-safe"],"id":42910,"nodeType":"InlineAssembly","src":"3445:249:43"}]},"documentation":{"id":42901,"nodeType":"StructuredDocumentation","src":"2890:431:43","text":" @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"3335:15:43","parameters":{"id":42906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42903,"mutability":"mutable","name":"domainSeparator","nameLocation":"3359:15:43","nodeType":"VariableDeclaration","scope":42912,"src":"3351:23:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":42902,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3351:7:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":42905,"mutability":"mutable","name":"structHash","nameLocation":"3384:10:43","nodeType":"VariableDeclaration","scope":42912,"src":"3376:18:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":42904,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3376:7:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3350:45:43"},"returnParameters":{"id":42909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42908,"mutability":"mutable","name":"digest","nameLocation":"3427:6:43","nodeType":"VariableDeclaration","scope":42912,"src":"3419:14:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":42907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3419:7:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3418:16:43"},"scope":42913,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"MessageHashUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":42844,"nodeType":"StructuredDocumentation","src":"190:330:43","text":" @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."},"fullyImplemented":true,"linearizedBaseContracts":[42913],"name":"MessageHashUtils","nameLocation":"529:16:43","scope":42914,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":43}